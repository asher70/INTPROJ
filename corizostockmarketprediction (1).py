# -*- coding: utf-8 -*-
"""corizostockmarketprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CfMPDt5vA_gzYpmqqYVxQ2X6wSXirC-X
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error

data = pd.read_excel('/content/1729258-1613615-Stock_Price_data_set_(1).xlsx')

minedaten=data.copy()#copy

minedaten.describe()

minedaten.dtypes

print(minedaten.isnull().sum())#no missing values

numerical_cols=['Open','High','Low','Close','Adj Close','Volume']
data_to_scale=minedaten[numerical_cols]
minedaten_scaled=minedaten.copy()
scaler=StandardScaler()
minedaten_scaled[numerical_cols]=scaler.fit_transform(data_to_scale )

minedaten_scaled.head()

lag_days=3
for i in range(1,lag_days+1):
  minedaten_scaled[f'Close_Lag_{i}']=minedaten_scaled['Close'].shift(i)

minedaten_scaled.head()

print(minedaten_scaled.dtypes)

print(minedaten_scaled.isnull().sum())

minedaten_scaled.fillna(minedaten_scaled.mean().iloc[0], inplace=True)

minedaten_scaled.head()

print(minedaten_scaled.isnull().sum())

minedaten_scaled['Year'] = minedaten_scaled['Date'].dt.year
minedaten_scaled['Month'] = minedaten_scaled['Date'].dt.month
minedaten_scaled['Day'] = minedaten_scaled['Date'].dt.day
minedaten_scaled['DayOfWeek'] = minedaten_scaled['Date'].dt.dayofweek

minedaten_scaled.head()

numerical_cols=['Open','High','Low','Close','Adj Close','Volume','Close_Lag_1','Close_Lag_2','Close_Lag_3','Year','Month','Day','DayOfWeek']
data_to_scale=minedaten_scaled[numerical_cols]
minedaten_scaled=minedaten_scaled.copy()
scaler=StandardScaler()
minedaten_scaled[numerical_cols]=scaler.fit_transform(data_to_scale )

minedaten_scaled.head()

minedaten_scaled.drop('Date', axis=1, inplace=True)

minedaten_scaled.head()

minedaten_scaled['Target'] = minedaten_scaled['Close'].shift(-1)

minedaten_scaled.tail()

minedaten_scaled.fillna(minedaten_scaled.mean().iloc[0], inplace=True)

minedaten_scaled.tail()

X = minedaten_scaled.drop(['Target'], axis=1)
y = minedaten_scaled['Target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.shape

y_train.shape

X_test.shape

y_test.shape

model=LinearRegression()

model.fit(X_train,y_train)

y_pred=model.predict(X_test)

mae=mean_squared_error(y_test,y_pred)
rmse=mean_absolute_error(y_test,y_pred)
print("Mean Absolute Error:", mae)
print("Root Mean Squared Error:", rmse)